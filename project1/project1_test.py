import unittest
import math
import numpy as np
from enum import Enum

class Trash(Enum):
    CARDBOARD = 0
    PAPER = 1
    CAN = 2
    SCRAP_METAL = 3
    BOTTLE = 4


class Bin(Enum):
    GLASS_BIN = 0
    METAL_BIN = 1
    PAPER_BIN = 2
    NOP = 3


class Detection(Enum):
    BOTTLE = 0
    CARDBOARD = 1
    PAPER = 2

np.random.seed(3630)

def verify(function, arg1 = None, arg2 = None) -> str:
  """ Will indicate with a print statement whether assertions passed or failed
    within function argument call.
    Args:
    - function: Python function object
    Returns:
    - string
  """
  try:
    if arg1 and arg2:
      function(arg1, arg2)
    elif arg1:
      function(arg1)
    elif arg2:
      function(arg2)
    else:
      function()
    return "\x1b[32m\"Correct\"\x1b[0m"
  except AssertionError:
    return "\x1b[31m\"Wrong\"\x1b[0m"
  except:
    return "\x1b[31m\"Wrong\"\x1b[0m"


class TestProject1(unittest.TestCase):
    """
        The class containing all test cases for this assignment
    """

    def get_cost_table(self, cost_table):
        self.COST_TABLE = cost_table

    def test_get_category_prior_pmf(self, get_category_prior_pmf):
        correct = [0.2, 0.3, 0.25, 0.2, 0.05]
        output = get_category_prior_pmf()
        if output is None:
            self.fail("output is None")
        self.assertEqual(len(output), len(correct))
        for (o, c) in zip(output, correct):
            self.assertEqual(o, c)

    def test_sample_category(self, sample_category):
        outputs = {
            0: 0,
            1: 0,
            2: 0,
            3: 0,
            4: 0
        }
        correct = [0.2, 0.3, 0.25, 0.2, 0.05]
        num_samples = 100000
        for i in range(num_samples):
            try:
                outputs[sample_category()] += 1
            except KeyError:
                self.fail("sample_category not implemented")
        for i in range(5):
            self.assertAlmostEqual(outputs[i] / num_samples, correct[i], 2)

    def test_sample_conductivity(self, sample_conductivity):
        num_samples = 100000

        def inner_test(trash: int, correct: float):
            num_conductivity = 0
            for i in range(num_samples):
                try:
                    num_conductivity += sample_conductivity(trash)
                except:
                    self.fail("num_conductivity not implemented")
            self.assertAlmostEqual(num_conductivity / num_samples, correct, 2)

        inner_test(Trash.CARDBOARD.value, 0.01)
        inner_test(Trash.PAPER.value, 0.01)
        inner_test(Trash.CAN.value, 0.9)
        inner_test(Trash.SCRAP_METAL.value, 0.85)
        inner_test(Trash.BOTTLE.value, 0.05)

    def test_sample_detection(self, sample_detection):
        num_samples = 100000

        def inner_test(trash: int, correct: dict):
            outputs = {
                0: 0,
                1: 0,
                2: 0
            }
            for i in range(num_samples):
                try:
                    outputs[sample_detection(trash)] += 1
                except KeyError:
                    self.fail("sample_deteciton not implemented")
            for i in range(3):
                self.assertAlmostEqual(outputs[i] / num_samples, correct[i], 2)

        inner_test(Trash.CARDBOARD.value, {
            0: 0.02,
            1: 0.88,
            2: 0.10
        })
        inner_test(Trash.PAPER.value, {
            0: 0.02,
            1: 0.20,
            2: 0.78
        })
        inner_test(Trash.CAN.value, {
            0: 0.33,
            1: 0.33,
            2: 0.34
        })
        inner_test(Trash.SCRAP_METAL.value, {
            0: 0.33,
            1: 0.33,
            2: 0.34
        })
        inner_test(Trash.BOTTLE.value, {
            0: 0.95,
            1: 0.02,
            2: 0.03
        })

    def test_sample_weight(self, sample_weight):
        num_samples = 1000000

        def inner_test(trash, correct_mean, correct_std):
            outputs = []
            for i in range(num_samples):
                outputs.append(sample_weight(trash))

            try:
                mean = sum(outputs) / len(outputs)
            except TypeError:
                self.fail("sample_weight not implemented")
            std = 0.0
            for i in range(num_samples):
                std += (outputs[i] - mean) ** 2
            std /= num_samples - 1
            std = math.sqrt(std)
            self.assertAlmostEqual(mean, correct_mean, 0)
            self.assertAlmostEqual(std, correct_std, 0)

        inner_test(Trash.CARDBOARD.value, 20, 10)
        inner_test(Trash.PAPER.value, 5, 5)
        inner_test(Trash.CAN.value, 15, 5)
        inner_test(Trash.SCRAP_METAL.value, 150, 100)
        inner_test(Trash.BOTTLE.value, 300, 200)

    def test_likelihood_no_sensor(self, likelihood_no_sensors):
        correct = [0.2, 0.3, 0.25, 0.2, 0.05]
        output = likelihood_no_sensors()
        if output is None:
            self.fail("output is None")
        self.assertEqual(len(output), len(correct))
        for (o, c) in zip(output, correct):
            self.assertEqual(o, c)

    def test_likelihood_given_weight(self, likelihood_given_weight):
        inputs = [30.430411912035503, 25.89607883011766, 19.15981448789667, 18.99716357052469, 16.8311369627637,
                  2.986915460611719, -2.0819812911730473, 19.363298847757434, 33.657576569486345, 19.24170029606732,
                  15.334167557594952, 1.9337368707453062, 9.669895672596937, 11.03144583329543, 1.9882609863380631,
                  8.454277581546643, 5.300381998667001, 4.425884708787354, 4.140166700666925, -5.535987574619149,
                  16.25887485593261, 25.02052936338954, 16.656649631040665, 11.528151696558584, 19.478540086273913,
                  28.006823083134343, 15.346866505889174, 17.966607046931976, 16.268745673654557, 15.450177740898383,
                  180.66378469458385, 63.098271148015186, -8.064719791326468, 133.12547637006642, 178.1570248324129,
                  175.37505480926126, 131.98677271832497, 140.9627624485339, 215.92218439400415, 1.6043556302241484,
                  419.7954023347352, 450.6402890903146, 165.03346082484634, 250.8842681655364, 261.80554120598424,
                  439.58056080972506, 206.55970859049555, 456.86761227339605, 507.4243963102791, 489.9622546768429]
        correct = [[0.02315623765803228, 1.9263021969803599e-07, 0.0006821038212461437, 0.0019518980146116171,
                    0.000804247954648874],
                   [0.03352907339282808, 1.2861159818874705e-05, 0.007425263378419033, 0.001846990203695439,
                    0.0007798430357404757],
                   [0.03975366723422557, 0.0014468255877734544, 0.0564467492099883, 0.0016950103593883763,
                    0.0007442407236028398],
                   [0.03969412723900091, 0.0015856066410605686, 0.057964601261898896, 0.0016914047592595503,
                    0.0007433910601712571],
                   [0.03794065346645957, 0.0048542897410213705, 0.07461321093520824, 0.0016436991081738572,
                    0.0007321219480547884],
                   [0.009384002943858683, 0.07357671814120546, 0.004450848847941194, 0.0013539201624034464,
                    0.0006621850200488359],
                   [0.003483934170701757, 0.02926199728498083, 0.00023304985850770436, 0.0012550809947076442,
                    0.0006375199785551434],
                   [0.03981344665953056, 0.0012882590813151054, 0.05452238202092319, 0.0016995256375559032,
                    0.0007453043681443675],
                   [0.015698806086652365, 5.869418081437768e-09, 7.556784359305376e-05, 0.002027631950542089,
                    0.0008218238492095013],
                   [0.03977969318411645, 0.0013810696213567902, 0.055675400425325476, 0.0016968267900498207,
                    0.0007446686635618829],
                   [0.03577973568695484, 0.009426062425521133, 0.07961045864343931, 0.0016110759350248056,
                    0.0007243840490330159],
                   [0.00780123719223004, 0.06611128389784397, 0.002624352476735788, 0.001333044795870715,
                    0.0006570176896536803],
                   [0.023398604309888302, 0.05158445263097332, 0.04520368411670179, 0.0014903629050869607,
                    0.0006954854143797969],
                   [0.026683805173638043, 0.038544447524313075, 0.05822940046776172, 0.0015189717222805095,
                    0.0007023763292910776],
                   [0.007878345668646222, 0.06655092177539172, 0.0027000540468190325, 0.0013341212234242803,
                    0.0006572846624565945],
                   [0.020485414025795835, 0.06284919716548709, 0.03386727448661056, 0.0014650465006763214,
                    0.0006893632220925977],
                   [0.013542566592806452, 0.07964460071626829, 0.012154835156704803, 0.0014003855440316757,
                    0.0006736133944379936],
                   [0.011863498310851933, 0.07926420709208136, 0.00852617249264233, 0.0013827239184777546,
                    0.0006692809571650433],
                   [0.011342538097414787, 0.07861736213072924, 0.007543296194426235, 0.0013769790581062379,
                    0.0006678687326468379],
                   [0.0015308120492168382, 0.008664534067101446, 1.733276080743055e-05, 0.0011901440952625758,
                    0.0006210127803041271],
                   [0.03719787239890088, 0.00632261932788364, 0.07729919296840448, 0.001631193788029026,
                    0.0007291590122233505],
                   [0.03517033871877486, 2.6329821457149954e-05, 0.010709794096153183, 0.0018269595842164798,
                    0.000775170722597828],
                   [0.03772570507481974, 0.005268940090226767, 0.07552691428620287, 0.0016398817005254963,
                    0.0007312178858041949],
                   [0.02786497668757403, 0.034023230519413764, 0.0626964119611343, 0.0015294740546263268,
                    0.0007048990262776742],
                   [0.039840024615506384, 0.001205405919347898, 0.05342252146076469, 0.0017020850250871998,
                    0.0007459070837331895],
                   [0.02895334013510296, 2.015477106423381e-06, 0.0027069699210444534, 0.0018955893618555328,
                    0.0007911606579935981],
                   [0.03580091301212142, 0.009376681385193283, 0.07959668974640793, 0.001611351458014001,
                    0.0007244495159550056],
                   [0.03907794409830313, 0.002764115983320151, 0.06691102059474599, 0.0016686346497874797,
                    0.0007380187449608235],
                   [0.03721159322437121, 0.006294563045832736, 0.07726063078542358, 0.0016314091337776143,
                    0.0007292100680515338],
                   [0.03597151012887205, 0.008982287090419823, 0.07946571202759463, 0.0016135937370395184,
                    0.0007249822279381664],
                   [3.540093734678809e-58, 7.495430725268039e-270, 3.327611190191438e-240, 0.003806207076108404,
                    0.0016694349663701616],
                   [3.6938971983314555e-06, 3.8327372300738173e-31, 6.4213081053264e-22, 0.002734780114955002,
                    0.0009890296332828695],
                   [0.0007773140464828206, 0.0026264700775431474, 1.9107734949872827e-06, 0.001143877466655213,
                    0.0006090840452107472],
                   [6.482862417013559e-30, 2.0567417263447189e-144, 5.038087972288873e-123, 0.003933025914436898,
                    0.0014083383669079488],
                   [1.9251792153039047e-56, 2.950022928056354e-262, 4.80499104473582e-233, 0.0038343719650994388,
                    0.0016568662164271376],
                   [1.5083752989047826e-54, 5.900582941490381e-254, 3.1585257266996044e-225, 0.0038630301538326076,
                    0.0016427261809320395],
                   [2.3355741540956046e-29, 6.861306333311742e-142, 1.0658098073083303e-120, 0.003925221339737946,
                    0.0014016411813781388],
                   [6.728956231297441e-34, 2.1661538306421362e-162, 1.2196952192133016e-139, 0.003973164882241208,
                    0.0014540297542597282],
                   [1.7695010066705558e-85, 0.0, 0.0, 0.0032102853909421886, 0.001826014806351218],
                   [0.007346566005316779, 0.06335607637084978, 0.0022045272166987353, 0.0013265521348590945,
                    0.000655406170430753], [0.0, 0.0, 0.0, 0.00010478638849967614, 0.0016671451106705824],
                   [0.0, 0.0, 0.0, 4.347441775695186e-05, 0.001502068518555617],
                   [8.406767559761145e-48, 2.8193679072910903e-224, 2.4111396814135485e-197, 0.003944595099166909,
                    0.0015885152826992492],
                   [6.999165414323521e-118, 0.0, 0.0, 0.0023983111007745196, 0.0019354598373854174],
                   [4.316110202018598e-129, 0.0, 0.0, 0.0021353330024685073, 0.001958667060464101],
                   [0.0, 0.0, 0.0, 6.0253266027553475e-05, 0.0015635599134738451],
                   [1.0564393897163616e-77, 0.0, 1.4866e-320, 0.0033997317382591236, 0.0017884704878094288],
                   [0.0, 0.0, 0.0, 3.598187234466552e-05, 0.0014665405823408328],
                   [0.0, 0.0, 0.0, 6.711294711358797e-06, 0.0011649618933604873],
                   [0.0, 0.0, 0.0, 1.2338014530914501e-05, 0.0012705230317406144]]
        for i in range(len(inputs)):
            output = likelihood_given_weight(inputs[i])
            if output is None:
                self.fail("output is None")
            self.assertEqual(len(output), len(correct[i]))
            for (o, c) in zip(output, correct[i]):
                self.assertAlmostEqual(o, c, 6)

    def test_likelihood_given_detection(self, likelihood_given_detection):
        correct = [[0.02, 0.02, 0.33, 0.33, 0.95], [0.88, 0.2, 0.33, 0.33, 0.02], [0.1, 0.78, 0.34, 0.34, 0.03]]
        for i in range(len(correct)):
            output = likelihood_given_detection(i)
            if output is None:
                self.fail("output is None")
            self.assertEqual(len(output), len(correct[i]))
            for (o, c) in zip(output, correct[i]):
                self.assertEqual(o, c)

    def test_bayes_given_weight(self, bayes_given_weight):
        inputs = [30.430411912035503, 25.89607883011766, 19.15981448789667, 18.99716357052469, 16.8311369627637,
                  2.986915460611719, -2.0819812911730473, 19.363298847757434, 33.657576569486345, 19.24170029606732,
                  15.334167557594952, 1.9337368707453062, 9.669895672596937, 11.03144583329543, 1.9882609863380631,
                  8.454277581546643, 5.300381998667001, 4.425884708787354, 4.140166700666925, -5.535987574619149,
                  16.25887485593261, 25.02052936338954, 16.656649631040665, 11.528151696558584, 19.478540086273913,
                  28.006823083134343, 15.346866505889174, 17.966607046931976, 16.268745673654557, 15.450177740898383,
                  180.66378469458385, 63.098271148015186, -8.064719791326468, 133.12547637006642, 178.1570248324129,
                  175.37505480926126, 131.98677271832497, 140.9627624485339, 215.92218439400415, 1.6043556302241484,
                  419.7954023347352, 450.6402890903146, 165.03346082484634, 250.8842681655364, 261.80554120598424,
                  439.58056080972506, 206.55970859049555, 456.86761227339605, 507.4243963102791, 489.9622546768429]
        correct = [
            [0.885105674130704, 1.1044417252599398e-05, 0.03259024476725486, 0.07460780259602869, 0.00768523408875979],
            [0.7472176772355033, 0.0004299292372542759, 0.206846159655239, 0.04116140382743894, 0.004344830044564585],
            [0.3476082630500196, 0.01897668433476983, 0.6169668678645596, 0.014821264247327519, 0.0016269205033236766],
            [0.34099860534927656, 0.02043210258706574, 0.6224424607865474, 0.014530276998304713, 0.001596554278805572],
            [0.27039563747979206, 0.051893364337890435, 0.6646922526346005, 0.01171432296421935, 0.001304422583497575],
            [0.07398759761220293, 0.8701667051938577, 0.04386555710344857, 0.010674900761887825, 0.0013052393286029753],
            [0.07098089405453413, 0.894266062735731, 0.0059351319893149405, 0.025570738926234696,
             0.0032471722941852118],
            [0.35616197288192264, 0.01728670591777589, 0.6096809236605426, 0.015203567006184311, 0.0016668305335747],
            [0.8708804115359876, 4.884028638252917e-07, 0.005240092332814411, 0.11248148029759879,
             0.011397527430735323],
            [0.35101213203377635, 0.01827963541733993, 0.6140928775731136, 0.014972634065092168, 0.0016427209106779162],
            [0.236600791157624, 0.09349763705182623, 0.6580504696938881, 0.010653567823332337, 0.0011975342733293497],
            [0.06981228835278636, 0.887432320243912, 0.029356249420877976, 0.011929249859137393, 0.0014698921232861703],
            [0.14721276835008906, 0.48681686149248793, 0.355499808359851, 0.009376646837495919, 0.0010939149600761753],
            [0.16784189368724026, 0.3636685072562575, 0.4578307319357347, 0.009554375347366181, 0.001104491773401319],
            [0.0699810708451556, 0.8867289468096642, 0.029979751061218116, 0.011850613793710744, 0.0014596174902513864],
            [0.12905767625321768, 0.5939229246485515, 0.2667038936074202, 0.009229762051287064, 0.0010857434395232487],
            [0.09042133797602468, 0.7976595104752779, 0.10144462371806512, 0.009350128257142034, 0.0011243995734901671],
            [0.08298034594038017, 0.8316313391945663, 0.07454638636603042, 0.00967159147233718, 0.0011703370266859306],
            [0.08087852843390174, 0.8408774787282088, 0.06723480786514816, 0.009818617221952802, 0.0011905677507885709],
            [0.0963097336201658, 0.8176826492569521, 0.0013630948171590572, 0.074876900036809, 0.009767622268913995],
            [0.25632619861210826, 0.06535264813838157, 0.6658246497574009, 0.011240366072590751, 0.0012561374195187427],
            [0.6948211702268703, 0.0007802533906343382, 0.26447682684690665, 0.03609320360582271,
             0.0038285459297660233],
            [0.2659353372038262, 0.05571257144786083, 0.6655036459501417, 0.011559823524536621, 0.001288621873634635],
            [0.17527784280255523, 0.3210222558669633, 0.49297061878166104, 0.00962078367849228, 0.0011084988703280445],
            [0.3611483463638484, 0.016390439966002812, 0.605341470993753, 0.01542933766013936, 0.0016904050162564017],
            [0.8408491073867549, 8.779878856739612e-05, 0.0982681631554411, 0.05505080296264702, 0.005744127706589637],
            [0.2368501737842898, 0.09305078119869481, 0.6582405381919962, 0.010660311169409752, 0.0011981956556093441],
            [0.30359810771926515, 0.03221179112985935, 0.6497929876706253, 0.012963689207290595, 0.0014334242729595278],
            [0.25655570520390175, 0.06509689271177364, 0.6658427487952434, 0.011247766744861668, 0.001256886544219632],
            [0.23889919253636308, 0.08948169504185259, 0.6596989662689342, 0.010716431961833823, 0.001203714191016314],
            [8.381765284306196e-56, 2.66200328660254e-267, 9.84834655661525e-238, 0.9011833224325777,
             0.09881667756742227],
            [0.0012371833491121474, 1.9255267924259338e-28, 2.6883312667097146e-19, 0.9159498058672656,
             0.08281301078362226],
            [0.1292173213209075, 0.654919519630363, 0.0003970483902073387, 0.19015323707237164, 0.025312873586150583],
            [1.5128810348504042e-27, 7.199610336954718e-142, 1.469649372239605e-120, 0.9178353530858694,
             0.08216464691413063],
            [4.531338364731993e-54, 1.04153046878526e-259, 1.4137021692658387e-230, 0.9025049019846775,
             0.09749509801532245],
            [3.5294268895924025e-52, 2.0710040909335743e-251, 9.238239348802377e-223, 0.9039051826254917,
             0.09609481737450824],
            [5.462524261752848e-27, 2.407120252249951e-139, 3.1159425620390526e-118, 0.9180447884075553,
             0.08195521159244462],
            [1.5516404592096555e-31, 7.492451597909078e-160, 3.515642666156563e-137, 0.9161782556590856,
             0.08382174434091436], [4.82575071000237e-83, 0.0, 0.0, 0.87550314728551, 0.12449685271448986],
            [0.0688998442670947, 0.8912784133770567, 0.025843976254209994, 0.012441082736863333, 0.0015366833647751544],
            [0.0, 0.0, 0.0, 0.20090467790361624, 0.7990953220963838],
            [0.0, 0.0, 0.0, 0.10375965345161955, 0.8962403465483805],
            [1.9362740964118274e-45, 9.740490042698999e-222, 6.941769346487624e-195, 0.9085319960442603,
             0.09146800395573972], [2.428430903707523e-115, 0.0, 0.0, 0.8321181811058197, 0.16788181889418016],
            [1.644232603490928e-126, 0.0, 0.0, 0.813460263439716, 0.18653973656028391],
            [0.0, 0.0, 0.0, 0.1335568398197336, 0.8664431601802663],
            [2.7462457995971123e-75, 0.0, 4.82911e-318, 0.8837704365091705, 0.11622956349082954],
            [0.0, 0.0, 0.0, 0.0893699738020828, 0.9106300261979172],
            [0.0, 0.0, 0.0, 0.02252476887534095, 0.9774752311246591],
            [0.0, 0.0, 0.0, 0.037391461133441835, 0.9626085388665581]]

        for i in range(len(inputs)):
            output = bayes_given_weight(inputs[i])
            if output is None:
                self.fail("output is None")
            self.assertEqual(len(output), len(correct[i]))
            for (o, c) in zip(output, correct[i]):
                self.assertAlmostEqual(o, c, 6)

    def test_bayes_given_three_sensors(self, bayes_given_three_sensors):
        inputs = [(0, 2, 30.430411912035503), (0, 1, 25.89607883011766), (0, 1, 19.15981448789667),
                  (0, 1, 18.99716357052469), (0, 1, 16.8311369627637), (0, 1, 2.986915460611719),
                  (0, 1, -2.0819812911730473), (0, 1, 19.363298847757434), (0, 1, 33.657576569486345),
                  (0, 2, 19.24170029606732), (0, 2, 15.334167557594952), (0, 1, 1.9337368707453062),
                  (0, 2, 9.669895672596937), (0, 2, 11.03144583329543), (0, 1, 1.9882609863380631),
                  (0, 2, 8.454277581546643), (0, 2, 5.300381998667001), (0, 2, 4.425884708787354),
                  (1, 1, 4.140166700666925), (0, 2, -5.535987574619149), (1, 0, 16.25887485593261),
                  (1, 0, 25.02052936338954), (1, 2, 16.656649631040665), (1, 1, 11.528151696558584),
                  (1, 2, 19.478540086273913), (1, 2, 28.006823083134343), (1, 1, 15.346866505889174),
                  (1, 2, 17.966607046931976), (1, 2, 16.268745673654557), (1, 1, 15.450177740898383),
                  (1, 2, 180.66378469458385), (1, 2, 63.098271148015186), (1, 0, -8.064719791326468),
                  (1, 2, 133.12547637006642), (1, 1, 178.1570248324129), (1, 1, 175.37505480926126),
                  (1, 1, 131.98677271832497), (1, 0, 140.9627624485339), (1, 1, 215.92218439400415),
                  (1, 1, 1.6043556302241484), (0, 0, 419.7954023347352), (0, 0, 450.6402890903146),
                  (0, 0, 165.03346082484634), (0, 0, 250.8842681655364), (0, 0, 261.80554120598424),
                  (1, 0, 439.58056080972506), (1, 0, 206.55970859049555), (0, 0, 456.86761227339605),
                  (0, 0, 507.4243963102791), (0, 1, 489.9622546768429)]
        correct = [
            [0.944585093914191, 9.19355273149246e-05, 0.011944756687272868, 0.04101712285436969, 0.002361091016851618],
            [0.9863166773588634, 0.00012897737764890714, 0.010342196241200374, 0.003087071932997483,
             0.00012507708928988605],
            [0.9240754518383624, 0.011465288800296243, 0.06212626676938034, 0.0022386692003639797,
             9.432339159701822e-05],
            [0.9214185416496644, 0.012547717386840997, 0.06370882988537536, 0.0022308253464166255,
             9.408573170254985e-05],
            [0.8777330642099778, 0.038284407414155563, 0.08172961780881377, 0.0021605648364935223,
             9.234573055925381e-05],
            [0.2699791259314692, 0.7216407456503874, 0.0060630476795535525, 0.0022132090608535833,
             0.00010387167773610625],
            [0.25720352773899885, 0.7364606193636128, 0.0008146328337459912, 0.005264608322938545,
             0.00025661174070377784],
            [0.9273000329460691, 0.010228979169591165, 0.06012725904214347, 0.002249083355577667,
             9.464548661843736e-05],
            [0.992209164277804, 1.2646496760577682e-07, 0.00022614121667589374, 0.007281369447075006,
             0.00028319859347744115],
            [0.4925242122809744, 0.20006337462994248, 0.2959260795609599, 0.010822775498782937, 0.0006635580293402989],
            [0.19754390432288121, 0.608895379372754, 0.1886906438742597, 0.004582236465261834, 0.0002878359648432431],
            [0.2554201995899145, 0.7379143079361034, 0.004068365925086897, 0.0024798409842631086,
             0.00011728556463211274],
            [0.0361558181857242, 0.9325946697617529, 0.029985811564242657, 0.001186356610728451, 7.734387755181737e-05],
            [0.05299828001420467, 0.8956981994225768, 0.049648950015489336, 0.001554170584109653,
             0.00010039996361952594],
            [0.25601163284432815, 0.7372543188577388, 0.004154351230569685, 0.002463243201872069,
             0.00011645386549124029],
            [0.026564265300741654, 0.9535394364244384, 0.018853285587775482, 0.0009786771623754398,
             6.433552466900385e-05],
            [0.014234771199771769, 0.9794712937514363, 0.00548469295634091, 0.0007582843828474672,
             5.095770960375665e-05],
            [0.012571587613578274, 0.9827438506109628, 0.0038786911896010615, 0.0007548276676145318,
             5.1042918243225594e-05],
            [0.02833602117750964, 0.06695540973693383, 0.7950117967561088, 0.1096493724682372, 4.7399861210573705e-05],
            [0.014780301143047105, 0.9787966767345291, 7.184274042144519e-05, 0.005919648756480371,
             0.0004315306255219545],
            [0.00025501688333263794, 6.501882654220942e-05, 0.9836990678308599, 0.015684087706470173,
             0.0002968087527950392],
            [0.0015614882194513113, 1.7534820898802612e-06, 0.8826321630602172, 0.11376114933375232,
             0.0020434459044892184],
            [0.001280460083628936, 0.0020923667092686755, 0.9805322004635962, 0.01608566580696227,
             9.306936543838941e-06],
            [0.010194849187344378, 0.004243617696566372, 0.9677175096809736, 0.017836696769538942,
             7.326665576571976e-06],
            [0.0018989308309861055, 0.0006722158203582032, 0.973969527481224, 0.023445993553018893,
             1.333231441265782e-05],
            [0.017955393561439163, 1.4623791539944638e-05, 0.6421125023808248, 0.33973349111867907,
             0.00018398914751694816],
            [0.010381995597183247, 0.0009269887845169804, 0.9737905034310838, 0.014894543865832341,
             5.968321383756485e-06],
            [0.001494525291247611, 0.0012368404654317354, 0.9788150881507177, 0.018442961595658443,
             1.0584496944594882e-05],
            [0.0012348379045640228, 0.00244389834208677, 0.9806665823144703, 0.015645607087100444,
             9.074351778527216e-06],
            [0.010447882945769687, 0.0008893959392174422, 0.9737179972118236, 0.014938741794150357,
             5.982109038991632e-06],
            [3.216454462627893e-58, 7.967922516356465e-269, 1.1564494697790727e-237, 0.9994311949820304,
             0.0005688050179696238],
            [4.671525968652633e-06, 5.67112042695641e-30, 3.1061963904857542e-19, 0.9995262834484548,
             0.0004690450255763996],
            [0.0004714661929118738, 0.0023895589958638215, 0.002151293751980079, 0.9730528200468812,
             0.02193486101236305],
            [5.700860471742359e-30, 2.116114814608806e-143, 1.694614011994115e-120, 0.9995355789612891,
             0.0004644210387108382],
            [1.5745610542318066e-55, 8.225310758822886e-262, 1.6579243638594944e-230, 0.9996150244747168,
             0.00038497552528310284],
            [1.2245218864706668e-53, 1.6330167601306293e-253, 1.0817461268548024e-222, 0.9996211392144968,
             0.0003788607855031446],
            [1.866126671567138e-28, 1.8689292087595956e-141, 3.59261734075379e-118, 0.9996818428813184,
             0.0003181571186815972],
            [1.1891353277849028e-34, 5.742012483568712e-163, 4.0010259342175707e-137, 0.9847433039338006,
             0.015256696066199338], [1.7283705871266904e-84, 0.0, 0.0, 0.9994933037569217, 0.0005066962430782804],
            [0.04472762750326412, 0.1314977535979317, 0.5662272062392422, 0.2574340527893878, 0.00011335987017434787],
            [0.0, 0.0, 0.0, 0.013601964831116677, 0.9863980351688834],
            [0.0, 0.0, 0.0, 0.006309762795732237, 0.9936902372042676],
            [3.006396132748943e-46, 1.5123773875670066e-222, 1.796380357201656e-195, 0.35266276149226516,
             0.647337238507735], [2.4951808797226432e-116, 0.0, 0.0, 0.2137476273254191, 0.7862523726745809],
            [1.5605433789527997e-127, 0.0, 0.0, 0.19301405796492177, 0.8069859420350782],
            [0.0, 0.0, 0.0, 0.4765109669377674, 0.5234890330622326],
            [2.1673600567714097e-78, 0.0, 5.67622e-318, 0.9782142818666478, 0.021785718133352196],
            [0.0, 0.0, 0.0, 0.005353973347004296, 0.9946460266529957],
            [0.0, 0.0, 0.0, 0.0012623041569364008, 0.9987376958430636],
            [0.0, 0.0, 0.0, 0.09189855664130288, 0.9081014433586971]]

        for i in range(len(inputs)):
            conductivity, detection, weight = inputs[i]
            output = bayes_given_three_sensors(conductivity, detection, weight)
            if output is None:
                self.fail("output is None")
            self.assertEqual(len(output), len(correct[i]))
            for (o, c) in zip(output, correct[i]):
                self.assertAlmostEqual(o, c, 6)

    def test_make_decision(self, make_decision):
        np.random.seed(3630)
        correct = [1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 3]
        for i in range(len(correct)):
            likelihoods = np.random.random(5)
            self.assertEqual(make_decision(likelihoods), correct[i])

    def test_fit_log_normal(self, fit_log_normal):
        inputs = [[2.428442384097525, 1.2148098718230635, 1.8364430340151081, 2.731293569876232, 1.0824029866319216,
                   2.6779454266049956, 3.4606990189287052, 1.971534348086295, 3.629531768518061, 3.6144115699023387,
                   9.159815058113423, 4.217996788468802, 1.1850015419403583, 1.9788729189316367, 5.378111528263414,
                   2.031952079716287, 2.5467990943562455, 5.085245626260583, 1.4791564796739576, 3.6536032411511794,
                   4.272751182369142, 6.716683673453097, 2.736760119926836, 1.2758641246189286, 2.8009958436409987,
                   1.5941543344600733, 3.13205711896548, 3.427569328240435, 4.521732483411626, 0.7592972208505864,
                   2.453399666429838, 2.735085480990993, 1.2668738486513302, 3.3767700387715753, 5.528614879853345,
                   1.7992821586025134, 5.6088348936616805, 1.547803597146208, 0.9274299127974199, 4.005221005417851,
                   2.8763712065615943, 2.1732759430456405, 1.0840260563462003, 4.0276278767339235, 3.2480921269286855,
                   1.5375268064486534, 2.2275188148737968, 6.232453903342105, 5.2589634085506605, 3.734744256932513,
                   1.5886459206313013, 4.381855191163991, 5.765272255657479, 0.9032450043832395, 2.3607129335329367,
                   2.1867080176640603, 4.83617609062124, 3.3561801951875063, 1.4796007411212109, 2.7125875468813083,
                   3.9691817215378355, 2.1854622950329454, 1.3077541850973688, 2.2716698836817777, 4.540670332069501,
                   3.4341143046791736, 5.296885916197205, 2.910566372475581, 2.6339942753879027, 2.293126398511832,
                   1.9361187993184532, 3.8186485292021675, 3.2036479289740147, 1.3403482991635345, 3.403005311867019,
                   2.4500034288854917, 6.423419688086561, 3.9528733150182536, 2.0745900139316755, 2.732673874900677,
                   1.6680842585789515, 3.304412608226492, 2.3559111143204055, 9.244628249061153, 3.155671554660509,
                   2.220445792783657, 3.5604465469140205, 2.9183161791086225, 3.9254508591935937, 4.4296202124002875,
                   6.7419100061342485, 3.571177301367205, 1.3304937698941552, 5.3636134632739525, 8.068599772193066,
                   2.093587018196449, 4.748823546794857, 5.986988385579438, 5.693597620417889, 7.1232446976674435,
                   3.1101825882957996, 3.844510364254862, 3.956160556526776, 3.4569419293597257, 5.417530085770417,
                   2.3251525967199065, 1.4487225955081007, 2.5629930235759, 6.464096024295476, 3.8912125426901687,
                   4.6258232454857735, 7.47202899027587, 1.7700409068256417, 3.084416737228961, 2.443871462120023,
                   1.8780537945968334, 3.9264547010250603, 5.871717643236463, 5.5929292671075945, 7.8283157431795285,
                   3.1803522551219587, 5.335180067201451, 9.514380789754163, 6.077612212606458, 0.9868724041798986,
                   4.38496548460171, 2.2530223015273387, 1.567041489426962, 4.163399313171347, 1.4475250585377801,
                   2.239457436869153, 1.3195578358187532, 2.4840092930962627, 5.535635293482197, 1.1379874689726028,
                   2.5892992449755354, 4.63586530365239, 1.710402526614739, 1.2357325449894057, 3.023260771829661,
                   3.370522672679105, 2.1325865032648084, 4.5271852073069345, 1.7199524339455605, 1.4599213785249752,
                   3.312776440392355, 3.92323327511537, 4.525721028651851, 3.453930342097113, 3.97744765906916,
                   3.3525351813449586, 3.356845789877749, 4.601200025320303, 1.020889961878522, 1.9132434908066218,
                   1.3621206426393422, 2.900419606178926, 3.2182405976193835, 5.734447286840101, 1.6570773418955302,
                   2.079560914088988, 1.5303532114790814, 3.5539387819647748, 1.636291775473937, 3.609829672522497,
                   1.4615477258246883, 4.237472838513495, 3.1757967599842445, 1.8790381477701266, 3.274299908145128,
                   1.7555782498980026, 3.0384375294321524, 1.4721463526070102, 2.7766899472179576, 2.6462448144190267,
                   2.0491740014930575, 1.8726135635450898, 2.4740621831491927, 2.444452597621978, 3.802640030722107,
                   2.8802378543481115, 3.7448408659768315, 1.484356167494146, 3.100857056826509, 2.6024118903819393,
                   2.1719364395769256, 1.9486701157348048, 2.6059152767933096, 1.5362488087807336, 3.8633166433336124,
                   5.908497562605105, 2.7610027896726477, 3.5436430992363173, 2.275095627018367, 4.206220321693467,
                   2.281970087723049, 2.376159023407433, 0.952150821499257, 2.196190910200965, 2.2515464258426854,
                   4.349677939948158, 2.34702015849823, 3.4291602517001083, 3.0166617081174953, 2.314680244930277,
                   3.8419253524831825, 2.6636583231405973, 4.951734370112199, 4.841225392177624, 2.263101464352464,
                   2.1108873230065046, 2.706504855339875, 1.7142582119564906, 2.00278613536542, 7.249540972834845,
                   2.897930185334393, 2.9785394917896397, 2.257265505269311, 8.96098133207132, 4.071407751657098,
                   1.7269554062135404, 3.161285979858483, 3.1942287064366996, 3.2437813389613694, 2.2736769148385867,
                   2.0985200087675464, 7.206695142693224, 1.8400211084954938, 4.121602449422932, 2.9539701358762036,
                   1.818656028619145, 2.787763603609426, 2.354339639057003, 3.1752783179901414, 1.7485649919744546,
                   3.342600753509447, 3.6782036828138103, 4.078777245457521, 1.4687650983068117, 2.8690700063228083,
                   2.2068361214627856, 1.4390811608294773, 1.1274794206810057, 2.8010552028517597, 6.200045231178085,
                   1.121191735011287, 2.1296021649813155, 4.736047933781809, 5.681184426098747, 3.4170866795476007,
                   6.5732610422044875, 1.9708420114275764, 3.0983836361833266, 2.0390186841077105, 3.5465753262549176,
                   3.6199779204962512, 3.6566047780023965, 3.1717061475128827, 2.852133403499454, 1.2418995452685502,
                   6.610177898116808, 1.2342362226423633, 2.516117242931283, 2.411535232215268, 1.0913221752751394,
                   5.616849979433408, 5.186972046194981, 4.0192214129357255, 3.468194798763552, 4.869148369953816,
                   2.465261827110186, 3.253821433646569, 1.5891678486314216, 7.400758756971771, 5.910155316698745,
                   2.6162980792497925, 1.7663875042963209, 2.4487976477278766, 2.350034093912325, 2.903809799194258,
                   3.615779787018173, 4.153119083466378, 2.51605879983094, 1.894941376198838, 4.380666244258788,
                   2.2852689396136516, 2.6495503487606675, 1.4648641883953386, 2.128491824301703, 2.0989879838422296,
                   2.335570464226624, 1.3415934159883953, 1.0380470878450963, 1.8674173901705184, 1.2465300825025791,
                   4.203519353755757, 1.5969128244157742, 3.4437947181216626, 1.4833896418996417, 3.1159487781406052,
                   2.3256862950950272, 6.422551191031683, 2.8333907550560413, 2.558156696450319, 3.171372419093409,
                   1.7524952327930512, 2.8349578741368666, 2.484277283557475, 3.645747602188604, 4.631105059157435,
                   2.2299819902971483, 1.6946016289376467, 3.7910451740174116, 1.893609587894541, 4.948072675807716,
                   3.7039453587623483, 4.334556368169596, 5.31248315198486, 12.993222257314201, 1.0713392313959629,
                   3.3128194953245638, 2.2444881014816636, 2.098754831795227, 0.5800680660835285, 3.771244761379454,
                   3.4104984559222022, 1.811340819668026, 2.617269067565097, 3.7320969141706226, 2.597196182663634,
                   3.145937129573425, 2.372650244552043, 1.620137269565628, 2.8316092738141947, 1.9712335952554487,
                   2.2553946667409406, 2.41354447341892, 6.265966538613524, 2.1788595252644396, 4.865500920731356,
                   5.4904195807445015, 4.42655128433668, 9.918957189600503, 1.296631264325623, 6.53148281234736,
                   1.321764095078673, 2.3712566842579346, 1.2176289212474707, 2.6413758333463093, 2.080361357022749,
                   6.213580897694908, 2.3318916277910655, 3.2013206807751273, 2.384549902536753, 1.021138268909097,
                   4.929209560358377, 2.950457093915938, 1.7188987917470022, 1.785353706478593, 2.1372799350801084,
                   2.6447668460436984, 1.9384121072633627, 2.327479571539181, 1.9396079514564835, 1.7624499928572153,
                   5.378926801794693, 5.333337036815934, 2.459204185492694, 1.5415691293793332, 1.7368686615709186,
                   2.545691865380244, 1.3966135126326977, 2.940102602658205, 1.971881865359649, 1.3404593528719828,
                   6.383691688211385, 2.169611274594816, 1.039338610347685, 2.144741002424392, 2.1919845167957157,
                   5.036780933206182, 4.1289866411274705, 1.4088110270002698, 3.062705704216207, 5.982232863526238,
                   1.2166107134872797, 2.824334696009817, 4.125709952294962, 4.567150879340293, 2.6357190510189614,
                   3.094369407849057, 4.8795186619308994, 1.884460234384435, 3.6204865372247945, 2.57481801550711,
                   1.5300512493393896, 4.378609821645295, 1.7366350694271018, 5.530039656902606, 3.191297706992046,
                   1.0280880122011666, 5.804032150231274, 3.3459233067422294, 2.576939463064877, 4.550769277376525,
                   1.781954866192866, 9.836223143684697, 2.158398457658277, 2.0172186105833667, 1.2275741086015646,
                   2.1272036504747844, 3.7575690082905644, 3.406648287581096, 2.523156932871238, 2.0757465218917264,
                   3.845291429459059, 2.613625059768869, 1.9089843959755401, 6.080888505787521, 3.887071192860496,
                   4.4870036938057485, 3.183262972047524, 3.387310759859643, 3.2758647276245725, 2.410745710394526,
                   3.3463437708492423, 3.2490718968108294, 3.0848151774682244, 1.6469799811578827, 3.5656627547700115,
                   1.0280262396046176, 2.9065730101325435, 6.298930435107874, 4.369398376341765, 5.4641435204983075,
                   5.165308495299182, 5.311544386024989, 1.4920939893157035, 2.172113835667325, 3.0624871592180294,
                   6.458472991890536, 3.030528444565967, 6.659113477986546, 3.1554744557699164, 2.1073081024265523,
                   3.9865864255561565, 3.1714535482429107, 7.916351549002726, 1.471431877278203, 1.755179055433696,
                   2.6501836727942796, 1.3391343247219198, 2.515868105653815, 1.8992312279105337, 4.0793748655151285,
                   3.900601080965782, 1.789732684273921, 2.0282770796858434, 4.182174535919129, 4.369815864961996,
                   1.946605382395475, 6.530536838312264, 4.2642735270262815, 2.9429971161187, 2.1662167122690645,
                   1.901721402160272, 1.1666523754930802, 2.276585813143889, 0.77035303394126, 2.477177584621196,
                   1.3596153921885075, 1.8492210373613922, 1.8983408875628198, 2.2612231876049473, 0.9253096574158391,
                   5.678596917475553, 5.375531384289329, 5.4320140208985315, 3.1456520901867426, 1.7065001889364302,
                   5.772122268918519, 3.9149758774394683, 5.02872441898324, 3.8071779554897014, 5.431308889499981,
                   3.0987739417868174, 3.8555302243693714, 1.4613520054975322, 2.4294145736304995, 2.194008861772649,
                   2.2013619522472645, 1.803727851693968, 3.9676106985761073, 5.766127448679414, 1.6717947999515061,
                   2.084102277637505, 3.8865269272328122, 3.630714100696862, 1.8041692488412533, 3.0442530397771637]
            ,
                  [34959170.79815449, 51762359.567799196, 47411415.872367196, 2323061.2052304405, 69136.60352614753,
                   135205324.4963425, 2112793.5100784358, 162120.4035102557, 174838.98090694202, 3645862.721465153,
                   13594815.329121217, 3913192.050610969, 9415029.573954212, 21500451.1624513, 862443.5077040627,
                   7975624.636630565, 39434.50056295492, 34158147.827099964, 402809.79280133225, 218067.08998712068,
                   60411725.994309, 605241888.1164209, 1363275.0739148378, 10772144.284432009, 1857327.674815533,
                   992282.5553522258, 699130.0595396446, 84357250.38940556, 32684945.89935913, 585137949.7162265,
                   22816.496057882665, 1391251.4327272165, 5710464.671517986, 3510382.9348121695, 31944288.508223437,
                   100729890.84866926, 447586.32335878734, 16347041.248221586, 1236911.538456917, 89391459.54134256,
                   85350376.41129899, 39715437.00142654, 12391764.883322308, 651862.9582796209, 251991.42832592892,
                   62255510.83612925, 1007075.4409851624, 607701.5509874969, 2635597.763495296, 4840002.026798173,
                   6245856.437278226, 78621843.94511339, 36086258.59324927, 2685212.61316618, 1147911.7914833932,
                   213825.4964948427, 207505576.33175737, 663169.9406283341, 371849.22285000485, 2826359.837514205,
                   3979329.5233983435, 15031505.74984141, 21811368.29896711, 24246.619995083434, 47521872.726806685,
                   911319.1322961944, 89971.77068326161, 474387.7559174091, 2378519.92244981, 3797435.7244466767,
                   15195139.489917442, 6180152.983316545, 40363557.25836232, 5190054.289988422, 2029.2514931732333,
                   22417.84272039614, 648006.2639702444, 10337080.513209049, 865247.6109671893, 9426538.47201721,
                   344388.4671750818, 13941039.837901939, 513300.5519063588, 4849186.332673296, 1040477345.1689602,
                   1126176.5816288188, 369881.47696221573, 988249.7678540999, 3780632.027657672, 19903516.16150616,
                   217828234.48609757, 278523.6869486152, 2306420.972434129, 4872233.33180074, 31435237.74765993,
                   2467805.497765867, 288112752.67221916, 1503489.8566503595, 4826499.113374603, 15178646.30026637,
                   3642935.5642547016, 2441452.057395124, 143655780.48211208, 493791.5086104588, 50508719.096470274,
                   742295.9951673608, 121378.27710736195, 1932105.4565313498, 452213.7208005129, 11325845.50685493,
                   425043.95373729686, 216256.41874249288, 15834117.405976877, 15745388.998904485, 13707079.360598,
                   2185025.41348989, 32372724.95155905, 69267112.21776845, 5375648.703873337, 45028.17493743917,
                   3410972689.1480103, 1148712.9657462244, 10902120.893497251, 359171.53925915103, 3026545.1504878704,
                   57174956.47872378, 89202.40277911433, 102306.11533596525, 2195411.9907988803, 984171.4988037598,
                   22649202.507776875, 102961112.65430246, 1675923.463536121, 14274130.89362232, 404773.5067981565,
                   5211030.48989417, 9947196.546449076, 43341669.831391655, 2171618.330945271, 7433044.430020651,
                   260698.78680298937, 22453567.076657757, 66933254.54997351, 3158.9652299450026, 382990.6669832005,
                   1018533975.4352785, 621180.0490795928, 3737070.3730835705, 19470658.326553706, 1131348.4934714115,
                   2882852.801039179, 121903.24605072157, 3720398.18153823, 27468397.123036504, 8591125.489156036,
                   7752892.037358855, 22187632.557473183, 6297988.999190813, 95458467.10606267, 1763187.376165131,
                   9864843.631960746, 2277190.945225595, 1315855.6458266368, 6839208.749116727, 1756785.9216212798,
                   1488344.0672796841, 9424165.770354828, 164518923.39816815, 669599.0165744931, 23193886.461567067,
                   633653.7966263836, 238259.62974306213, 16122207.216432795, 82175.10640711828, 101303.89182977572,
                   739664.9680500972, 10881418.484422611, 32939431.066386063, 47975.85336744716, 277336.7985905164,
                   127155.77893336014, 5647924.053421697, 1951845036.9992006, 56926083.25227334, 24285785.452991717,
                   25803046.635584213, 2942959.286756438, 57992.35365928826, 12576164.082402091, 51179481.81765074,
                   2206536.873583655, 25494956.736195996, 1935731.3638287513, 3502278.0379490824, 6890875.587762226,
                   994603.3270293443, 32740926.470288813, 2202826.9996845075, 42687.91847284504, 16968551.88637815,
                   665564966.5213491, 9413985.903730037, 38154472.90636372, 30215.133398358346, 7402613.746510946,
                   18155085.57512425, 898856.0474914699, 331668.6933812439, 108804115.79126394, 1812762.404097657,
                   255253664.75574464, 3014146.3724788968, 28751.435675587476, 31208185.87495017, 1026266.8815786259,
                   89246205.13221066, 17262638.831092812, 1865381.9342335304, 1748215.7569946605, 124034.75025654804,
                   41619202.66538399, 5588371.804682868, 20115195.877021976, 8553558.468288718, 50121.63260415051,
                   985750.1997994779, 166523953.97175816, 5018830.575130827, 51188902.47655981, 26093900.09649721,
                   1427501.2997749348, 17716284.072748713, 183426.39787884243, 16469211.731848612, 11470080.455519762,
                   11613702.577477362, 10507604.085691074, 1110717.919996887, 175816.65879418747, 260625.84564502005,
                   49597264.04672047, 1226102.195184747, 764101.3797972897, 257518.9969100542, 7156371.845404919,
                   651676702.6774925, 686821.6527565417, 57970.11657538711, 28961775.339314725, 1321355.650682047,
                   35755.03747846936, 22182093.19654498, 7884640.592397745, 117906599.52878442, 9873666.6449838,
                   151885.90542066086, 2233.9096224185178, 442866.09445200075, 49245550.52667468, 120650.33357555153,
                   25186798.35464349, 62460217.95039092, 707996.4333462089, 361346138.6369022, 11594910.661597375,
                   3454251.4825129635, 1597663.7684472443, 863351.1477660816, 397941.310189435, 280456.4559761425,
                   3327178.0530476593, 1759895.120997173, 403582.3113378798, 401141.60266471305, 6759145.567912643,
                   15519761.092734206, 14518695.970883856, 16175424.771991238, 17010110.27931273, 15695428.238936769,
                   147349.82668640357, 1339215.5917345595, 345860399.3950257, 2982128.1704469407, 2361365.0841752654,
                   184064.56753235662, 7733436.461960154, 1497480.162647485, 664918.5167209067, 134162.77314981713,
                   443795.61785385903, 16397194.040671093, 5191581.923486834, 1575136.2842830988, 302695402.5530284,
                   5998334.550781204, 854650.6877557691, 1269922.1641711667, 1099662.0848208219, 9276124.831752568,
                   87859525.14421321, 2739727.7677268316, 101902.96507766304, 3993355.161926736, 1873129264.7852714,
                   307950.5081551801, 9942946.82318662, 45820272.11870012, 217054.6808536032, 835089.0135882524,
                   900519.7467614461, 4198805.14306867, 8347207.930507413, 467816.96760509396, 3781936.3537193714,
                   9121784.411686461, 120001855.32790826, 61411.18726970955, 9506745.00379699, 108799752.95801271,
                   3446682.5005133157, 2557502.2959999447, 18671814.92196235, 12043051.9831913, 14819.704119945645,
                   115016.65468144295, 14694318.862984806, 282371.2234551786, 11289670.133766335, 1014999.8511522505,
                   3899514.9836885645, 111230936.19313078, 10774904.04418183, 682765.7519696663, 12900827.0630308,
                   134298.5848606557, 228686.35622919802, 2488977.008257531, 3921553.6046407847, 3788717.359125665,
                   137336.59184470342, 15015480.008744888, 28285.19588240316, 7682654.005142792, 2647339.4783080127,
                   1786937.9087369137, 31112190.638286613, 327334.63807286636, 25227183.498287253, 329657819.47951734,
                   3558547.2795702475, 596338372.5859632, 53186235.23214591, 2638350.7693080544, 10254006.4687673,
                   3145493181.6339273, 263998.93533773755, 2433556.148959878, 68884930.80934235, 149536.54977613554,
                   2243386.658906257, 10088984.01542491, 12468832.416438172, 14253377.953919593, 15835068.309648497,
                   715570.0740787503, 577177588.1956298, 3992695.8121820544, 7088876.562160069, 162585.77120945556,
                   496810.6430653547, 46853656.591053456, 669234.7637317437, 64134.88153309388, 177482240.30000207,
                   734826.729175232, 137365645.56012264, 175371227.06497565, 6962190.1372932, 1762740.3042732782,
                   64936500.96318961, 5431960.095131799, 142806136.86748743, 566965.8135687213, 671041.2762788621,
                   1526390.820647165, 197370.12680284033, 14367.56927319693, 476549.81951030076, 18704.615738810775,
                   25288278.30067324, 740450.4119420223, 6096215.834177068, 63932660.10946646, 185090795.04754665,
                   134816634.11874816, 2388354.703103274, 390772.9393102029, 51014975.01936643, 44958380.53701657,
                   5818356.469272307, 917035.3985140527, 17342.128999268996, 20191.947977757703, 286940086.768623,
                   15614539.579929963, 14550435.65131192, 3292098.4390004636, 736886.0529954383, 12251.829531158945,
                   2282012.5377453803, 1772082.8675332326, 2479292.088204756, 807368.656599975, 119784.41863329038,
                   1045730.2599052908, 4801446.385065489, 703161.6174592598, 810247.3145436104, 87866.76969572212,
                   63764645.64236932, 972616.5148920766, 26894666.01589259, 2531775.6421332783, 38077659.73853053,
                   32426225.0713373, 2013713.170335323, 18949995.846282054, 1687433.2321010043, 490224.5623409384,
                   8357217.608505889, 8787750.609620811, 358973.0406967133, 1068023.2812609766, 5142573.798415881,
                   47912.46676055445, 15297392.999070004, 1351802.251104918, 7958332.262722489, 30612.402732353,
                   3583629.696498614, 117171.86055557516, 389665933.2518792, 3167650.9542215196, 21271102.243357494,
                   11237394.260670332, 10921992.679816801, 127941004.28064612, 172343.1883634066, 231584.94670652554,
                   1144024.2275092823, 1716571.15299332, 74196329.96084905, 203394.3896524597, 875536970.4276268,
                   3220514.238135394, 4142555.2488185866, 19449883.357014265, 5168041.884044745, 30116180.308606125,
                   38385151.74425829, 6032561.444625929, 1125000.7228747664, 15151417.09629641, 91299.33861005989,
                   8721016.589194106, 1277391.7278565892, 3503721.507627974, 1258587.4491948094, 8253999.525692791,
                   1276642.8019395173, 211947.09889181601, 8098109.847646128, 6941849.545742968, 377950.2596515228,
                   9333814.935561808, 2957176.632299567, 173036.3434170908, 1277948.1879974848, 419963.5394936271,
                   1661158.184012997, 230478.05924625788, 21955416.83842553, 210417.84360672528, 437337.27131483186,
                   35511883.39958869, 822955.6142607032, 5184585.818857267, 12330411.523710733, 671973.0020299773,
                   13929066.91191024, 3844579.9554627123, 7868437.1805505995, 287498600.0072972, 5636386.864377269,
                   46556150.23477381, 89623.71014970404, 3088232.954783563, 1214649.6083924847, 5893963.454536498]
            , [6.175121116996179e+16, 1.9299081662063888e+17, 1.2001075114864082e+17, 1.0965949132111048e+17,
               4.206031731530855e+17, 1.2257167384860962e+17, 1.3571345319808277e+17, 6.869274538454881e+16,
               1.652267966691057e+18, 1.0211970749552298e+18, 1.8198435206508742e+17, 1.367091267590238e+18,
               1.5072704793611427e+17, 2.993241386820933e+17, 1.8151207081744717e+17, 2.8368221428148755e+17,
               1.4167759622079176e+17, 1.1299129665865909e+17, 1.1475029703456773e+18, 2.1157503403454435e+17,
               1.0940147223867145e+18, 2.8263737233128164e+16, 1.1620775664818974e+17, 6.303711299438144e+16,
               6.976973925065625e+16, 1.495302919816626e+17, 1.2779021932727155e+17, 8.836609156804835e+16,
               7.707056752886725e+16, 5.283260644331533e+17, 1.1067184799773624e+17, 3.6172302920938125e+17,
               2.398569465275136e+17, 1.2981158378079216e+17, 3.4452694176092283e+18, 2.2960975750736493e+17,
               1.856633017489143e+16, 5.152131441880424e+16, 1.678588648753555e+17, 2.0902009706492333e+17,
               1.799947494934388e+17, 9.81906368829871e+17, 1.3436854861687122e+18, 4.168516061607305e+17,
               2.188393212496787e+17, 2.528763030316471e+17, 1.5482435148426102e+17, 4.496433124985821e+17,
               3.690504062498517e+17, 1.0675364213553342e+17, 2.7458251469918013e+17, 2.6345770829608525e+18,
               1.0314803947325132e+18, 1.1789800031506776e+17, 9.380545881978483e+17, 3.007768528706879e+17,
               2.4872536875262982e+17, 6.291458575666227e+17, 1.619801186573221e+17, 1.907599489912902e+17,
               1.1003752053829798e+17, 6.715243438688026e+17, 5.335799931262942e+17, 1.2502926203035206e+17,
               2.1382319703965398e+17, 5.638935525380886e+17, 1.5950906523936502e+17, 9.397733059257389e+16,
               1.2492872657258002e+17, 1.8638431299741056e+17, 9.278842930591021e+17, 2.1607340368526915e+17,
               1.2682439045834642e+17, 5.340471533733713e+16, 5.4048823112876486e+17, 3.2531623090730374e+17,
               2.7742739944328947e+17, 1.2467114969706573e+17, 6.734514048233659e+17, 3.564824752452699e+17,
               1.89925201475766e+17, 1.8197147178738963e+17, 9.181891848720724e+17, 1.758063419151449e+17,
               1.134166204783713e+17, 2.7028460522219126e+17, 4.284293188178144e+17, 3.4812474831209572e+16,
               1.1765872621801522e+17, 9.97278262439888e+17, 5.70896844574096e+16, 8.073120719135342e+17,
               6.63938990995741e+17, 5.6842578867399464e+16, 5.741921692272739e+17, 4.080107108084383e+16,
               4.111209937275475e+17, 5.231199810962285e+17, 1.914441787387078e+16, 1.2026367199305291e+17,
               2.2514093763951354e+17, 5.95962400597191e+16, 1.0195316200792923e+17, 6.553023453735374e+17,
               2.839133255394429e+17, 3.787162110570328e+17, 2.133398420579624e+17, 1.2814453891139213e+17,
               2.7782663148294605e+18, 2.1035071599063645e+17, 7.453898972297146e+17, 1.4601311815331434e+17,
               1.8660204451902266e+17, 2.595232414543291e+17, 7.76248405443103e+17, 1.4769051680573552e+16,
               3.037219505629659e+17, 8.140142981754616e+16, 2.754950298695338e+17, 2.503016495060968e+17,
               2.3449850530800016e+17, 1.2333939639315058e+17, 3.66451242727405e+17, 1.1940284355301866e+17,
               2.2325284299757264e+17, 6.560492016326152e+16, 5.4673749165203034e+17, 2.2102960383555594e+18,
               2.45399193973244e+17, 4.839334366141971e+17, 8.966609491452533e+16, 9.19461282596768e+16,
               2.048120746332519e+18, 4.853884035414007e+16, 5.417614359598358e+17, 6.919675436530723e+16,
               3.9084470200233325e+17, 5.0073971778650136e+16, 9.950008382633077e+18, 6.358557511435622e+17,
               4.3033581082455654e+17, 6.639234924771469e+17, 1.1706117794752486e+17, 2.7139556236697248e+17,
               1.1869123033504522e+17, 9.146728732699213e+16, 5.986653777418305e+17, 1.0086498637230302e+17,
               3.1278095981086445e+17, 6.8435692866414216e+16, 1.4474621941952686e+18, 3.525502847868582e+16,
               4.439431910442657e+17, 4.539930282039476e+16, 1.6394627862033754e+18, 2.4481214255957382e+17,
               1.135764829978439e+17, 1.76418839801919e+17, 2.3356573239846086e+17, 7.990173290413182e+16,
               9.890735597395694e+16, 5.24618933045577e+17, 1.3326852315466197e+17, 1.6540376440676877e+17,
               1.3274690822507166e+17, 5.878348211623914e+16, 3.51788655310359e+17, 1.453864268319187e+17,
               2.4420392214041898e+17, 1.6996946774225238e+17, 4.623067278715054e+17, 1.6522708410372202e+17,
               2.422742896823622e+17, 3.59895692839143e+17, 5.378311067458097e+16, 5.6651651235064904e+16,
               2.2172985995798582e+17, 2.417258382133863e+17, 6.08478396193664e+16, 3.267156253306885e+17,
               8.878814744493729e+17, 1.3341793456014712e+17, 5.842559945926772e+17, 1.4811032503555226e+17,
               4.0805859008421875e+17, 1.2800991567229942e+17, 2.8049704451050672e+17, 2.259717867585788e+17,
               1.0569166045702408e+17, 4.954127367722461e+17, 4.448529610687028e+17, 3.1300167634837914e+17,
               4.774395982954626e+16, 4.725055654376879e+16, 1.4241270007942165e+17, 2.330574372500948e+18,
               3.2357003180195334e+17, 1.3774118144668568e+17, 8.534705958486552e+16, 2.7179950527673126e+17,
               7.701611002544635e+16, 2.4581507247408778e+17, 5.506117318716256e+16, 1.2188632806549952e+17,
               7.21570426766516e+17, 1.1103988264733213e+17, 7.44184083564453e+16, 1.1928607963657797e+18,
               5.711845904065363e+17, 3.698788311241661e+17, 2.3907961594083174e+18, 3.5233598401397926e+17,
               1.5104494505740022e+17, 4.199111507266617e+17, 6.142326253271816e+16, 1.0094777138876926e+17,
               7.36951230312383e+17, 2.1250541453147203e+17, 1.1562241529848045e+17, 1.1296572311926542e+17,
               6.773070612738195e+16, 1.4054102109500517e+17, 2.7510937901881213e+17, 6.730773838764152e+17,
               4.0882237052961114e+17, 2.6666015036863616e+17, 4.691291849795454e+17, 5.9349059928269656e+16,
               2.0201235528289437e+17, 4.584110111427722e+17, 8.904185695039736e+16, 2.3285021027205677e+17,
               3.1461492703038508e+16, 2.8701500902487462e+17, 1.447073666016446e+17, 1.2175021918160358e+17,
               1.7596941560931264e+17, 1.559824528775609e+17, 5.368893336718967e+17, 8.725888158435827e+17,
               2.3488626101857606e+17, 3.1940375142165843e+17, 1.5384098023171955e+17, 2.7460828178781235e+17,
               1.4066920457928896e+18, 1.78489184992636e+17, 3.9460836263751424e+18, 2.996750812011724e+17,
               1.8227602452392435e+17, 3.8627367148933235e+17, 9.093832756980137e+17, 3.0284329856141075e+17,
               1.1619617933122806e+17, 4.2753336067872536e+16, 7.794071195025926e+16, 7.968881759125816e+17,
               5.4163706239176704e+17, 1.880109973466426e+18, 1.4021271101783962e+17, 9.298199079994408e+16,
               5.463233720533914e+17, 5.4045448360975155e+17, 1.5861062515923037e+17, 8.34870507974322e+16,
               1.0722600657146594e+17, 1.164511143099694e+18, 1.7146413399620138e+17, 1.70594307439244e+17,
               2.2628645810356006e+17, 1.6244993069792278e+17, 4.342862997669286e+16, 4.629776369447027e+17,
               5.892270534063997e+17, 2.337792074335286e+17, 3.658524322678345e+17, 8.910634436792539e+17,
               4.740260777296073e+17, 3.0401949174865235e+17, 2.1565760369322637e+17, 4.529493359687243e+17,
               4.052797596108739e+16, 4.365803579847469e+17, 2.4069226202127094e+17, 9.499700717116402e+16,
               1.9653755380743347e+17, 3.8828496858643405e+17, 1.8243228321086224e+17, 2.864936167705647e+17,
               4.253199126218608e+16, 9.575465053263489e+17, 3.00496020534425e+17, 5.0485627450592154e+17,
               1.6569773335310816e+17, 2.1845298428267194e+17, 6.620746717865693e+16, 1.0101823512669182e+17,
               3.295565547630543e+17, 1.484792512104683e+17, 3.300131382124484e+17, 8.035122950504488e+17,
               8.49196489511644e+16, 1.1775863782018253e+17, 2.6678745520958254e+18, 2.3594106305549046e+17,
               3.6156256450437624e+16, 2.8044489130457668e+16, 1.6662664777191206e+18, 8.518864942918291e+17,
               1.505604419178178e+18, 1.2442496082784866e+17, 1.6938906231254304e+17, 1.8134701908092378e+18,
               1.2437790670795997e+17, 1.8448016446115843e+17, 5.175705119019285e+17, 1.0604485240779375e+18,
               1.4062202580388866e+17, 1.1270982218606065e+18, 2.3239093199836262e+17, 6.705006782229852e+16,
               8.032489858921066e+16, 1.0414354978370616e+18, 2.3296826850330052e+16, 8.682429479603051e+16,
               6.822726629987202e+16, 3.7171027698198464e+17, 1.5078526374397725e+17, 6.859839192317257e+16,
               2.7810004434072044e+18, 7.016985099586818e+16, 1.4508050100225315e+17, 2.3900731657258765e+17,
               1.2263543174156772e+18, 4.109478505093792e+17, 7.43135156250293e+16, 2.1498908349714182e+17,
               1.3542884290425634e+17, 4.055822327426778e+16, 1.2829574402347304e+17, 1.8616681959472195e+17,
               6.85853060642758e+17, 5.183378185534643e+17, 2.5133360504083696e+17, 1.3221903762888522e+16,
               6.361365856100588e+17, 1.3904888121299904e+18, 1.6365119034366797e+18, 1.694851832548662e+17,
               1.7516015588382336e+17, 1.8846231810314079e+18, 4.1959402163108294e+17, 5.141770398151847e+16,
               3.542316522936556e+17, 5.767230433330407e+16, 4.940280211584724e+17, 7.591944260773523e+17,
               1.428540782655506e+17, 5.961428854299037e+17, 3.2920129146081574e+17, 1.790735102570865e+17,
               2.5870826466261405e+17, 5.020146250919891e+17, 4.533091038429188e+17, 4.168751215919275e+18,
               2.584582083645494e+17, 4.901115748524341e+16, 9.870673096983469e+16, 2.0429647241161392e+17,
               7.808776902025768e+16, 3.615900564843669e+16, 3.890712585417627e+16, 1.0663559814897675e+17,
               2.3049069136383862e+17, 8.556744008936408e+17, 9.698320351695034e+16, 3.99728192305274e+17,
               2.0428492429794726e+17, 6.114090051110541e+17, 5.360940078518189e+17, 5.296047470501577e+16,
               1.850173823899459e+17, 9.342260537893912e+16, 9.61702999010095e+17, 1.1099512239744401e+18,
               7.220818606177015e+17, 3.130000203679183e+17, 1.1642575919995131e+17, 1.6663031662731344e+17,
               1.2928675462797335e+18, 4.75950177624616e+16, 2.38547548839064e+17, 5.322932757760256e+17,
               3.545639237403183e+17, 1.2106262966069598e+17, 5.369527936869975e+16, 3.3025122230975245e+17,
               4.19667023726539e+17, 9.464293312210975e+17, 2.9199615361118e+17, 3.8923245959781523e+17,
               4.589799091348673e+17, 3.925760772540259e+17, 1.9961822605286405e+18, 7.201614850695465e+17,
               5.427738832155924e+17, 1.0043961834623987e+17, 6.9233305468248e+17, 1.444133109868391e+17,
               1.0196942282861387e+17, 3.6580995257944274e+18, 4.216408630793733e+17, 4.6897693081966445e+17,
               3.519783668761138e+17, 3.570098746325686e+17, 1.6973576806913907e+17, 3.558478277324732e+16,
               6.558960910022519e+17, 5.731581651361038e+17, 1.0709257561123565e+18, 2.758977894583587e+17,
               4.6107967028045094e+17, 1.658325545905702e+17, 1.0115073659514852e+18, 2.5551917004059306e+17,
               1.549199380718655e+17, 1.119582494490028e+17, 3.583545446325494e+16, 6.956344659946779e+17,
               3.013043951627891e+17, 4.13475252712363e+17, 5.3490627482237875e+17, 4.704660078084668e+16,
               1.254023376020166e+18, 4.692251502062328e+17, 9.702127693151266e+16, 2.9716295492656988e+16,
               1.4569827193538938e+17, 1.2589179299233259e+17, 1.6854833479948849e+18, 2.445510845417634e+17,
               2.6142384937526573e+17, 7.240078240777542e+17, 1.318280807497001e+17, 3.075191702616433e+17,
               2.1889730479300166e+17, 1.1155744460245427e+17, 1.1146972712000803e+17, 4.788450820500946e+17,
               1.3914237596073856e+17, 1.8175283724447974e+17, 3.190425728169008e+18, 1.9835071157637644e+16,
               1.6691294811231165e+18, 2.631876599672161e+17, 9.881831441724303e+17, 3.1016500035402726e+17,
               1.6572033852301344e+17, 9.980458386093966e+16, 1.3313562072695898e+17, 7.804028108714021e+16,
               1.7892553453963616e+17, 1.7804715695853536e+17, 7.712754692103347e+17, 5.258580732663913e+18,
               2.5544192507943142e+17, 2.2839011700416675e+17, 5.139950489473213e+16, 6.621889948593371e+17,
               4.0607443390650445e+17, 1.805679371528321e+18, 1.9730165305810525e+17, 1.3404815611891043e+17,
               5.369550870458033e+17, 5.974941220657168e+16, 2.0054736771297587e+17, 4.821279622149544e+18,
               1.5616577993615455e+18, 4.176152631340964e+16, 2.1346304565371942e+17, 6.211453261416879e+16,
               6.2573740229806e+16, 2.0632666595269654e+17, 2.1414373434540797e+17, 1.2155878982750219e+17,
               4.922346514850397e+17, 1.2016880548220431e+18, 3.5847078471720934e+17, 9.376778330068915e+17,
               6.554563057360919e+16, 6.995230187646696e+16, 9.825965765949333e+16, 4.644145496191591e+17,
               5.306661204698629e+16, 5.6630282673855955e+17, 9.054389305906569e+17, 1.8004138682649395e+18,
               2.392482753611675e+17, 1.0330898831884211e+17, 3.126586974334925e+16, 7.032763891241462e+17]
                  ]

        correct = [(1., 0.5), (15., 2.5), (40., 1)]
        for i in range(3):
            mu, sigma = fit_log_normal(inputs[i])
            if mu is None or sigma is None:
                self.fail("fit_log_normal incorrect")
            self.assertAlmostEqual(mu, correct[i][0], 0)
            self.assertAlmostEqual(sigma, correct[i][1], 0)

    def test_score_likelihood_no_sensor(self, likelihood_no_sensors, make_decision):
        correct = 56
        cost = 0
        inputs = [0, 3, 3, 1, 1, 0, 2, 0, 1, 2, 3, 2, 1, 2, 2, 1, 2, 1, 0, 4, 1, 1, 0, 0, 1, 2, 1, 3, 2, 0, 1, 1, 2, 3,
                  2, 2, 4, 0, 0, 3, 2, 1, 4, 1, 1, 3, 1, 1, 1, 3, 3, 3, 3, 2, 1, 2, 1, 3, 3, 2, 2, 2, 1, 4, 1, 1, 3, 3,
                  2, 2, 3, 2, 2, 1, 3, 0, 2, 1, 1, 1, 3, 1, 2, 3, 3, 3, 1, 2, 1, 1, 4, 2, 4, 3, 1, 3, 2, 3, 2, 4]
        for i in range(len(inputs)):
            likelihoods = likelihood_no_sensors()
            decision = make_decision(likelihoods)
            if decision is None:
                self.fail("decision is None")
            cost += self.COST_TABLE[decision][inputs[i]]
        self.assertEqual(cost, correct)

    def test_score_likelihood_given_weight(self, likelihood_given_weight, make_decision):
        correct = 53
        cost = 0
        inputs = [(0, 30.430411912035503), (3, 208.96078830117656), (3, 141.59814487896674), (1, 4.498581785262345),
                  (1, 3.4155684813818503), (0, 2.986915460611719), (2, 3.9590093544134763), (0, 19.363298847757434),
                  (1, 11.828788284743172), (2, 14.62085014803366), (3, 356.68335115189905), (2, 11.933736870745307),
                  (1, 9.669895672596937), (2, 21.03144583329543), (2, 11.988260986338062), (1, 8.454277581546643),
                  (2, 15.300381998667001), (1, 4.425884708787354), (0, 18.28033340133385), (4, -121.43950298476602),
                  (1, 6.258874855932612), (1, 15.020529363389539), (0, 23.31329926208133), (0, 13.056303393117167),
                  (1, 9.478540086273913), (2, 28.006823083134343), (1, 5.346866505889175), (3, 209.33214093863955),
                  (2, 16.268745673654557), (0, 20.900355481796765), (1, 6.533189234729193), (1, 0.654913557400759),
                  (2, 7.096764010433677), (3, 133.12547637006642), (2, 16.407851241620644), (2, 16.268752740463064),
                  (4, 263.97354543664994), (0, 19.096276244853392), (0, 26.592218439400416), (3, 1.6043556302241484),
                  (2, 17.99488505836838), (1, 8.766007227257864), (4, 165.03346082484634), (1, 3.7721067041384098),
                  (1, 4.045138530149606), (3, 219.79028040486253), (1, 2.6639927147623887), (1, 8.9216903068349),
                  (1, 10.185609907756978), (3, 244.98112733842146), (3, 163.29430245941725), (3, 57.496585469553736),
                  (3, 195.81406481348208), (2, 19.352619857055068), (1, 0.2466213370382686), (2, 14.54237136660372),
                  (1, 8.550231684463895), (3, 75.69933509266214), (3, 37.356544271853494), (2, 9.663108997725587),
                  (2, 12.734076623208432), (2, 18.221070007050066), (1, 6.211694602055428), (4, -9.672569918689874),
                  (1, 4.101817675123657), (1, 2.0432593993231003), (3, 210.37879792983014), (3, 138.7892910681037),
                  (2, 13.636172815101922), (2, 13.006072259840442), (3, 230.27488528370287), (2, 8.867067779567481),
                  (2, 11.830050867258787), (1, 13.646686364393656), (3, 205.0806074851298), (0, 19.3219779177233),
                  (2, 21.271787744921877), (1, 6.558616344885106), (1, -1.555188776782403), (1, 4.694707179415651),
                  (3, 257.830042558472), (1, -1.0750593422891521), (2, 19.35496221878525), (3, 146.68609131542817),
                  (3, 75.89171692211269), (3, 159.9746647216041), (1, 11.420655223019567), (2, 17.85562380013719),
                  (1, 6.814876383963291), (1, 0.2865771863567623), (4, 297.80355998605944), (2, 13.992279756326695),
                  (4, 436.2752264291054), (3, 71.67736530468244), (1, 6.561708768528623), (3, 178.81278830103528),
                  (2, 14.735962391820038), (3, -123.07335286624988), (2, 13.639887526815953), (4, 161.75519377193496)]
        for i in range(len(inputs)):
            likelihoods = likelihood_given_weight(inputs[i][1])
            decision = make_decision(likelihoods)
            if decision is None:
                self.fail("decision is None")
            cost += self.COST_TABLE[decision][inputs[i][0]]
        self.assertEqual(cost, correct)

    def test_score_likelihood_given_detection(self, likelihood_given_detection, make_decision):
        correct = 69
        cost = 0
        inputs = [(0, 2), (3, 1), (1, 1), (2, 0), (1, 2), (3, 2), (1, 2), (2, 0), (2, 1), (0, 2), (1, 2), (0, 1),
                  (1, 2), (1, 2), (2, 0), (1, 2), (2, 2), (2, 1), (4, 0), (0, 1), (2, 0), (4, 0), (1, 2), (1, 2),
                  (1, 2), (3, 2), (3, 1), (1, 2), (1, 2), (3, 1), (2, 2), (1, 2), (1, 2), (3, 2), (2, 1), (3, 1),
                  (2, 1), (3, 0), (2, 1), (1, 2), (3, 1), (2, 2), (3, 2), (1, 2), (1, 2), (4, 0), (4, 0), (1, 2),
                  (2, 2), (2, 2), (2, 1), (1, 2), (0, 1), (1, 2), (3, 1), (3, 2), (4, 0), (0, 1), (3, 2), (2, 0),
                  (1, 2), (3, 1), (3, 0), (0, 1), (0, 1), (3, 2), (2, 0), (0, 1), (1, 1), (2, 1), (0, 1), (3, 2),
                  (0, 1), (1, 2), (2, 0), (0, 2), (1, 2), (3, 0), (1, 0), (1, 1), (1, 0), (1, 2), (4, 0), (1, 2),
                  (1, 2), (3, 0), (2, 0), (0, 0), (1, 0), (3, 0), (2, 2), (3, 0), (3, 0), (2, 1), (0, 1), (2, 1),
                  (3, 0), (0, 1), (2, 2), (1, 2)]
        for i in range(len(inputs)):
            likelihoods = likelihood_given_detection(inputs[i][1])
            decision = make_decision(likelihoods)
            if decision is None:
                self.fail("decision is None")

            cost += self.COST_TABLE[decision][inputs[i][0]]
        self.assertEqual(cost, correct)

    def test_score_bayes_given_weight(self, bayes_given_weight, make_decision):
        correct = 52
        cost = 0
        inputs = [(0, 30.430411912035503), (3, 208.96078830117656), (3, 141.59814487896674), (1, 4.498581785262345),
                  (1, 3.4155684813818503), (0, 2.986915460611719), (2, 3.9590093544134763), (0, 19.363298847757434),
                  (1, 11.828788284743172), (2, 14.62085014803366), (3, 356.68335115189905), (2, 11.933736870745307),
                  (1, 9.669895672596937), (2, 21.03144583329543), (2, 11.988260986338062), (1, 8.454277581546643),
                  (2, 15.300381998667001), (1, 4.425884708787354), (0, 18.28033340133385), (4, -121.43950298476602),
                  (1, 6.258874855932612), (1, 15.020529363389539), (0, 23.31329926208133), (0, 13.056303393117167),
                  (1, 9.478540086273913), (2, 28.006823083134343), (1, 5.346866505889175), (3, 209.33214093863955),
                  (2, 16.268745673654557), (0, 20.900355481796765), (1, 6.533189234729193), (1, 0.654913557400759),
                  (2, 7.096764010433677), (3, 133.12547637006642), (2, 16.407851241620644), (2, 16.268752740463064),
                  (4, 263.97354543664994), (0, 19.096276244853392), (0, 26.592218439400416), (3, 1.6043556302241484),
                  (2, 17.99488505836838), (1, 8.766007227257864), (4, 165.03346082484634), (1, 3.7721067041384098),
                  (1, 4.045138530149606), (3, 219.79028040486253), (1, 2.6639927147623887), (1, 8.9216903068349),
                  (1, 10.185609907756978), (3, 244.98112733842146), (3, 163.29430245941725), (3, 57.496585469553736),
                  (3, 195.81406481348208), (2, 19.352619857055068), (1, 0.2466213370382686), (2, 14.54237136660372),
                  (1, 8.550231684463895), (3, 75.69933509266214), (3, 37.356544271853494), (2, 9.663108997725587),
                  (2, 12.734076623208432), (2, 18.221070007050066), (1, 6.211694602055428), (4, -9.672569918689874),
                  (1, 4.101817675123657), (1, 2.0432593993231003), (3, 210.37879792983014), (3, 138.7892910681037),
                  (2, 13.636172815101922), (2, 13.006072259840442), (3, 230.27488528370287), (2, 8.867067779567481),
                  (2, 11.830050867258787), (1, 13.646686364393656), (3, 205.0806074851298), (0, 19.3219779177233),
                  (2, 21.271787744921877), (1, 6.558616344885106), (1, -1.555188776782403), (1, 4.694707179415651),
                  (3, 257.830042558472), (1, -1.0750593422891521), (2, 19.35496221878525), (3, 146.68609131542817),
                  (3, 75.89171692211269), (3, 159.9746647216041), (1, 11.420655223019567), (2, 17.85562380013719),
                  (1, 6.814876383963291), (1, 0.2865771863567623), (4, 297.80355998605944), (2, 13.992279756326695),
                  (4, 436.2752264291054), (3, 71.67736530468244), (1, 6.561708768528623), (3, 178.81278830103528),
                  (2, 14.735962391820038), (3, -123.07335286624988), (2, 13.639887526815953), (4, 161.75519377193496)]
        for i in range(len(inputs)):
            likelihoods = bayes_given_weight(inputs[i][1])
            decision = make_decision(likelihoods)
            if decision is None:
                self.fail("decision is None")
            cost += self.COST_TABLE[decision][inputs[i][0]]
        self.assertEqual(cost, correct)

    def test_score_bayes_given_three_sensors(self, bayes_given_three_sensors, make_decision):
        correct = 10
        cost = 0
        inputs = [(0, 0, 2, 30.430411912035503), (1, 0, 1, 7.948039415058829), (2, 1, 1, 14.579907243948336),
                  (2, 1, 2, 14.498581785262346), (1, 0, 2, 3.4155684813818503), (1, 0, 2, -3.5065422696941404),
                  (0, 0, 1, -2.0819812911730473), (1, 0, 1, 4.681649423878717), (1, 0, 2, 11.828788284743172),
                  (3, 1, 0, 142.41700296067322), (1, 0, 2, 15.334167557594952), (3, 1, 1, 88.67473741490613),
                  (4, 0, 0, 486.79582690387747), (3, 1, 0, 270.6289166659086), (4, 0, 0, 179.53043945352252),
                  (3, 1, 1, 219.08555163093286), (1, 0, 2, 5.300381998667001), (3, 1, 1, 138.5176941757471),
                  (1, 0, 2, 4.140166700666925), (3, 1, 1, -60.71975149238301), (0, 0, 2, 30.430411912035503),
                  (1, 0, 1, 7.948039415058829), (2, 1, 1, 14.579907243948336), (2, 1, 2, 14.498581785262346),
                  (1, 0, 2, 3.4155684813818503), (1, 0, 2, -3.5065422696941404), (0, 0, 1, -2.0819812911730473),
                  (1, 0, 1, 4.681649423878717), (1, 0, 2, 11.828788284743172), (3, 1, 0, 142.41700296067322),
                  (1, 0, 2, 15.334167557594952), (3, 1, 1, 88.67473741490613), (4, 0, 0, 486.79582690387747),
                  (3, 1, 0, 270.6289166659086), (4, 0, 0, 179.53043945352252), (3, 1, 1, 219.08555163093286),
                  (1, 0, 2, 5.300381998667001), (3, 1, 1, 138.5176941757471), (1, 0, 2, 4.140166700666925),
                  (3, 1, 1, -60.71975149238301), (2, 1, 1, 16.25887485593261), (4, 0, 0, 700.8211745355816),
                  (3, 1, 2, 183.1329926208133), (2, 1, 1, 11.528151696558584), (2, 1, 2, 19.478540086273913),
                  (0, 0, 1, 46.013646166268686), (1, 0, 2, 5.346866505889175), (1, 0, 2, 7.966607046931978),
                  (3, 1, 1, 175.37491347309114), (2, 1, 1, 15.450177740898383), (4, 0, 1, 361.3275693891677),
                  (3, 1, 2, 63.098271148015186), (2, 1, 1, 7.096764010433677), (4, 0, 0, 266.25095274013285),
                  (1, 0, 1, 6.407851241620644), (1, 0, 2, 6.2687527404630625), (3, 1, 2, 131.98677271832497),
                  (3, 1, 2, 140.9627624485339), (0, 0, 1, 26.592218439400416), (3, 1, 0, 1.6043556302241484),
                  (1, 0, 2, 7.9948850583683795), (1, 0, 1, 8.766007227257864), (0, 0, 1, 13.251673041242316),
                  (2, 1, 2, 13.772106704138409), (2, 1, 0, 14.045138530149606), (3, 1, 0, 219.79028040486253),
                  (2, 1, 0, 12.663992714762388), (1, 0, 2, 8.9216903068349), (0, 0, 1, 30.371219815513957),
                  (3, 1, 0, 244.98112733842146), (0, 0, 1, 21.329430245941726), (3, 1, 0, 57.496585469553736),
                  (1, 0, 2, 7.2907032406741035), (0, 0, 0, 28.70523971411013), (1, 0, 2, 0.2466213370382686),
                  (1, 0, 2, 4.54237136660372), (1, 0, 2, 8.550231684463895), (1, 0, 1, 1.284966754633107),
                  (0, 0, 1, 8.735654427185349), (0, 0, 1, 9.326217995451175), (2, 1, 2, 12.734076623208432),
                  (0, 0, 1, 26.442140014100136), (2, 1, 0, 16.211694602055427), (3, 1, 1, -4.836284959344937),
                  (3, 0, 0, 132.03635350247313), (2, 1, 2, 12.0432593993231), (1, 0, 2, 8.018939896491506),
                  (4, 0, 0, 277.5785821362074), (1, 0, 2, 3.636172815101922), (3, 1, 2, 110.12144519680885),
                  (1, 0, 2, 9.013744264185144), (0, 0, 1, 7.734135559134961), (3, 1, 0, 86.60101734517576),
                  (0, 0, 1, 37.29337272878731), (1, 0, 2, 7.754030374256491), (3, 1, 2, 143.21977917723297),
                  (3, 1, 2, 275.4357548984375), (0, 0, 1, 23.117232689770212), (0, 0, 1, 6.889622446435194),
                  (0, 0, 1, 19.389414358831303), (1, 0, 1, 10.3915021279236), (2, 1, 1, 8.924940657710849),
                  (2, 1, 2, 19.35496221878525), (1, 0, 2, 4.834304565771409), (2, 1, 1, 11.294585846105635),
                  (2, 1, 0, 15.498733236080206), (1, 0, 2, 11.420655223019567), (3, 1, 1, 207.11247600274382),
                  (1, 0, 1, 6.814876383963291), (0, 0, 1, 10.573154372713525), (0, 0, 1, 19.89017799930297),
                  (3, 0, 1, 129.8455951265339), (2, 1, 1, 18.406880660727634), (4, 0, 0, 143.35473060936488),
                  (0, 0, 1, 23.123417537057247), (0, 0, 1, 22.88127883010353), (0, 0, 1, 19.471924783640077),
                  (1, 0, 1, -8.653667643312492), (0, 0, 1, 17.279775053631905), (0, 0, 2, 13.087759688596748)]
        for i in range(len(inputs)):
            likelihoods = bayes_given_three_sensors(inputs[i][1], inputs[i][2], inputs[i][3])
            decision = make_decision(likelihoods)
            if decision is None:
                self.fail("decision is None")
            cost += self.COST_TABLE[decision][inputs[i][0]]
        self.assertEqual(cost, correct)


if __name__ == '__main__':
    unittest.main()
